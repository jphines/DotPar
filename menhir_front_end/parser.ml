type token =
  | IMPORT
  | TRUE
  | FALSE
  | NIL
  | BOOLEAN
  | CHAR
  | FUNC
  | NUMBER
  | VOID
  | IF
  | ELSE
  | ELIF
  | FOR
  | IN
  | RETURN
  | SEMI
  | COMMA
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | AND
  | OR
  | NOT
  | GT
  | LT
  | GEQ
  | LEQ
  | EQ
  | NEQ
  | ASSIGN
  | ADD
  | SUB
  | MULT
  | DIV
  | REM
  | STRING_LITERAL
  | NUM_LITERAL
  | CHAR_LITERAL
  | IDENTIFIER

open Parsing;;
let yytransl_const = [|
  257 (* IMPORT *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* NIL *);
  261 (* BOOLEAN *);
  262 (* CHAR *);
  263 (* FUNC *);
  264 (* NUMBER *);
  265 (* VOID *);
  266 (* IF *);
  267 (* ELSE *);
  268 (* ELIF *);
  269 (* FOR *);
  270 (* IN *);
  271 (* RETURN *);
  272 (* SEMI *);
  273 (* COMMA *);
  274 (* COLON *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACE *);
  278 (* RBRACE *);
  279 (* LBRACK *);
  280 (* RBRACK *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* GT *);
  285 (* LT *);
  286 (* GEQ *);
  287 (* LEQ *);
  288 (* EQ *);
  289 (* NEQ *);
  290 (* ASSIGN *);
  291 (* ADD *);
  292 (* SUB *);
  293 (* MULT *);
  294 (* DIV *);
  295 (* REM *);
  296 (* STRING_LITERAL *);
  297 (* NUM_LITERAL *);
  298 (* CHAR_LITERAL *);
  299 (* IDENTIFIER *);
    0|]

let yytransl_block = [|
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\005\000\005\000\006\000\
\007\000\007\000\007\000\007\000\007\000\007\000\008\000\008\000\
\009\000\009\000\011\000\011\000\011\000\014\000\014\000\014\000\
\015\000\015\000\015\000\015\000\015\000\015\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\017\000\017\000\017\000\
\018\000\018\000\019\000\019\000\021\000\021\000\020\000\020\000\
\020\000\024\000\024\000\025\000\022\000\022\000\010\000\010\000\
\010\000\010\000\010\000\013\000\012\000\012\000\012\000\029\000\
\029\000\029\000\029\000\029\000\031\000\031\000\030\000\030\000\
\030\000\034\000\034\000\035\000\035\000\032\000\032\000\033\000\
\033\000\026\000\026\000\037\000\037\000\038\000\036\000\036\000\
\023\000\023\000\039\000\039\000\040\000\041\000\041\000\042\000\
\043\000\043\000\044\000\044\000\044\000\046\000\047\000\049\000\
\049\000\050\000\048\000\048\000\051\000\051\000\052\000\053\000\
\045\000\045\000\045\000\045\000\045\000\027\000\028\000\004\000\
\004\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\001\000\000\000\002\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\001\000\003\000\001\000\004\000\004\000\001\000\002\000\002\000\
\001\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\003\000\001\000\003\000\005\000\001\000\003\000\001\000\003\000\
\003\000\001\000\000\000\002\000\006\000\006\000\001\000\001\000\
\003\000\003\000\003\000\001\000\001\000\001\000\003\000\004\000\
\003\000\001\000\001\000\001\000\006\000\006\000\001\000\001\000\
\001\000\003\000\005\000\001\000\003\000\001\000\003\000\001\000\
\000\000\003\000\001\000\001\000\003\000\002\000\001\000\001\000\
\001\000\000\000\001\000\003\000\002\000\001\000\000\000\003\000\
\001\000\000\000\002\000\002\000\002\000\003\000\005\000\001\000\
\000\000\002\000\001\000\000\000\005\000\006\000\009\000\003\000\
\001\000\001\000\001\000\001\000\001\000\007\000\008\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\122\000\000\000\000\000\000\000\007\000\
\000\000\073\000\072\000\000\000\071\000\067\000\003\000\120\000\
\000\000\066\000\068\000\121\000\002\000\006\000\008\000\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\012\000\013\000\014\000\000\000\065\000\000\000\000\000\
\011\000\010\000\009\000\061\000\062\000\000\000\019\000\025\000\
\000\000\074\000\000\000\000\000\000\000\077\000\000\000\000\000\
\060\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\023\000\024\000\000\000\000\000\064\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\000\000\000\000\000\000\000\000\
\000\000\084\000\000\000\000\000\000\000\000\000\000\000\091\000\
\000\000\000\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\028\000\027\000\026\000\075\000\086\000\000\000\069\000\
\070\000\000\000\000\000\000\000\000\000\000\000\048\000\049\000\
\000\000\000\000\057\000\059\000\058\000\033\000\034\000\032\000\
\035\000\000\000\000\000\040\000\000\000\021\000\000\000\020\000\
\000\000\085\000\000\000\000\000\000\000\000\000\000\000\092\000\
\018\000\098\000\119\000\000\000\000\000\000\000\000\000\097\000\
\000\000\082\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\096\000\094\000\101\000\100\000\113\000\000\000\
\114\000\099\000\115\000\000\000\116\000\117\000\118\000\000\000\
\000\000\000\000\054\000\050\000\000\000\053\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\041\000\052\000\
\000\000\000\000\000\000\000\000\112\000\000\000\000\000\102\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\000\000\045\000\000\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\000\000\000\046\000\000\000\110\000\
\000\000\111\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\015\000\007\000\008\000\045\000\100\000\
\101\000\057\000\046\000\047\000\164\000\048\000\060\000\061\000\
\062\000\156\000\157\000\063\000\211\000\086\000\087\000\179\000\
\180\000\142\000\064\000\016\000\115\000\018\000\019\000\079\000\
\080\000\020\000\110\000\077\000\081\000\082\000\089\000\167\000\
\168\000\175\000\151\000\152\000\170\000\171\000\172\000\189\000\
\200\000\201\000\190\000\173\000\174\000"

let yysindex = "\016\000\
\063\255\000\000\046\255\000\000\103\255\103\255\063\255\000\000\
\027\255\000\000\000\000\253\254\000\000\000\000\000\000\000\000\
\005\255\000\000\000\000\000\000\000\000\000\000\000\000\174\255\
\075\255\007\255\107\000\000\000\020\255\085\255\076\255\174\255\
\104\255\000\000\000\000\000\000\094\255\000\000\177\000\177\000\
\000\000\000\000\000\000\000\000\000\000\095\255\000\000\000\000\
\179\255\000\000\094\255\174\255\096\255\000\000\113\255\094\255\
\000\000\042\255\128\255\077\000\228\255\026\255\000\000\000\000\
\000\000\000\000\094\255\094\255\000\000\177\000\177\000\177\000\
\177\000\177\000\000\000\000\000\107\255\005\255\127\255\138\255\
\149\255\000\000\174\255\174\255\154\255\153\255\161\255\000\000\
\156\255\081\000\000\000\177\000\177\000\177\000\177\000\177\000\
\177\000\177\000\177\000\166\255\188\255\000\000\173\255\000\255\
\000\255\000\000\000\000\000\000\000\000\000\000\174\255\000\000\
\000\000\174\255\005\255\182\255\106\255\133\255\000\000\000\000\
\094\255\254\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\099\000\000\000\184\255\000\000\094\255\000\000\
\187\255\000\000\190\255\174\255\174\255\205\255\149\255\000\000\
\000\000\000\000\000\000\193\255\136\255\133\000\055\000\000\000\
\190\255\000\000\094\255\210\255\000\000\013\255\002\255\203\255\
\204\255\094\255\000\000\000\000\000\000\000\000\000\000\225\255\
\000\000\000\000\000\000\232\255\000\000\000\000\000\000\219\255\
\207\255\094\255\000\000\000\000\159\000\000\000\174\255\094\255\
\094\255\229\255\000\000\233\255\236\255\239\255\000\000\000\000\
\238\255\109\255\244\255\237\255\000\000\094\255\190\255\000\000\
\000\000\243\255\159\000\174\255\190\255\094\255\245\255\000\000\
\094\255\000\000\249\255\004\000\000\000\009\000\190\255\007\000\
\159\000\190\255\094\255\000\000\190\255\000\000\010\000\000\000\
\190\255\000\000"

let yyrindex = "\000\000\
\182\000\000\000\000\000\000\000\031\001\000\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\211\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\
\000\000\030\001\000\000\060\001\120\001\070\255\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\255\000\000\000\000\
\027\000\000\000\017\000\000\000\067\255\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\241\000\
\009\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\001\102\001\000\000\144\255\000\000\000\000\000\000\
\155\255\000\000\000\000\017\000\000\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\028\000\000\000\028\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\185\255\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\013\000\227\255\000\000\000\000\
\043\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\050\000\000\000\000\000\
\000\000\000\000\061\255\000\000\000\000\000\000\000\000\000\000\
\000\000\006\255\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\027\001\000\000\064\001\000\000\000\000\
\000\000\199\255\221\255\000\000\223\255\030\000\242\255\205\000\
\006\000\000\000\173\000\208\255\000\000\000\000\000\000\171\000\
\000\000\000\000\212\255\180\255\251\255\000\000\000\000\000\000\
\178\255\180\000\005\000\209\255\159\255\221\000\000\000\000\000\
\105\255\123\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 658
let yytable = "\017\000\
\017\000\058\000\075\000\059\000\116\000\147\000\076\000\085\000\
\088\000\102\000\186\000\076\000\049\000\125\000\024\000\084\000\
\001\000\169\000\031\000\183\000\143\000\029\000\178\000\026\000\
\070\000\026\000\053\000\027\000\070\000\181\000\033\000\058\000\
\058\000\196\000\103\000\050\000\072\000\073\000\074\000\025\000\
\025\000\123\000\023\000\149\000\025\000\124\000\078\000\028\000\
\070\000\028\000\098\000\099\000\043\000\051\000\214\000\104\000\
\105\000\106\000\107\000\108\000\067\000\148\000\043\000\003\000\
\068\000\208\000\043\000\223\000\065\000\066\000\044\000\213\000\
\075\000\144\000\165\000\090\000\076\000\145\000\117\000\047\000\
\044\000\220\000\047\000\087\000\044\000\047\000\047\000\224\000\
\009\000\047\000\087\000\226\000\032\000\047\000\052\000\034\000\
\035\000\036\000\027\000\058\000\055\000\158\000\024\000\132\000\
\133\000\137\000\177\000\010\000\011\000\012\000\013\000\014\000\
\037\000\067\000\083\000\058\000\056\000\068\000\027\000\058\000\
\039\000\059\000\109\000\054\000\140\000\212\000\058\000\204\000\
\027\000\040\000\084\000\027\000\193\000\041\000\042\000\043\000\
\044\000\010\000\011\000\030\000\013\000\014\000\058\000\111\000\
\192\000\017\000\112\000\091\000\058\000\058\000\195\000\141\000\
\114\000\039\000\210\000\154\000\039\000\113\000\078\000\039\000\
\039\000\078\000\058\000\039\000\207\000\114\000\118\000\039\000\
\222\000\039\000\058\000\079\000\121\000\058\000\079\000\216\000\
\119\000\194\000\010\000\011\000\030\000\013\000\014\000\058\000\
\120\000\134\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\136\000\108\000\078\000\108\000\
\108\000\139\000\069\000\108\000\135\000\108\000\108\000\108\000\
\098\000\027\000\146\000\108\000\153\000\070\000\071\000\072\000\
\073\000\074\000\150\000\178\000\108\000\184\000\185\000\181\000\
\108\000\108\000\108\000\108\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\191\000\107\000\
\187\000\107\000\107\000\188\000\197\000\107\000\199\000\107\000\
\107\000\107\000\202\000\198\000\206\000\107\000\203\000\092\000\
\093\000\094\000\095\000\096\000\097\000\209\000\107\000\205\000\
\215\000\217\000\107\000\107\000\107\000\107\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\218\000\
\219\000\105\000\221\000\105\000\105\000\225\000\001\000\105\000\
\021\000\105\000\105\000\105\000\081\000\090\000\016\000\105\000\
\126\000\127\000\128\000\129\000\130\000\131\000\080\000\089\000\
\105\000\083\000\015\000\051\000\105\000\105\000\105\000\105\000\
\034\000\035\000\036\000\010\000\011\000\159\000\013\000\014\000\
\160\000\095\000\055\000\161\000\095\000\162\000\022\000\176\000\
\182\000\037\000\166\000\146\000\163\000\056\000\138\000\000\000\
\000\000\039\000\034\000\035\000\036\000\000\000\000\000\122\000\
\000\000\000\000\040\000\000\000\000\000\000\000\041\000\042\000\
\043\000\044\000\000\000\037\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\039\000\034\000\035\000\036\000\070\000\
\071\000\072\000\073\000\074\000\040\000\000\000\000\000\000\000\
\041\000\042\000\043\000\044\000\000\000\037\000\092\000\093\000\
\094\000\095\000\038\000\000\000\000\000\039\000\034\000\035\000\
\036\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\041\000\042\000\043\000\044\000\000\000\155\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\039\000\
\034\000\035\000\036\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\041\000\042\000\043\000\044\000\
\000\000\037\000\034\000\035\000\036\000\056\000\000\000\000\000\
\000\000\039\000\005\000\005\000\005\000\005\000\005\000\000\000\
\000\000\000\000\040\000\037\000\000\000\000\000\041\000\042\000\
\043\000\044\000\000\000\039\000\004\000\004\000\004\000\004\000\
\004\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\041\000\042\000\043\000\044\000\022\000\000\000\000\000\022\000\
\000\000\000\000\022\000\022\000\000\000\000\000\022\000\000\000\
\000\000\000\000\022\000\022\000\022\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\029\000\000\000\000\000\029\000\000\000\000\000\
\029\000\029\000\000\000\000\000\029\000\000\000\000\000\000\000\
\029\000\029\000\029\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\030\000\029\000\029\000\030\000\000\000\000\000\
\030\000\030\000\000\000\000\000\030\000\000\000\000\000\000\000\
\030\000\030\000\030\000\000\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\030\000\030\000\022\000\022\000\000\000\
\000\000\022\000\000\000\000\000\000\000\022\000\022\000\022\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\031\000\000\000\000\000\
\031\000\000\000\000\000\031\000\031\000\000\000\000\000\031\000\
\000\000\000\000\000\000\031\000\031\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\036\000\000\000\000\000\
\036\000\000\000\000\000\036\000\036\000\000\000\000\000\036\000\
\000\000\000\000\000\000\036\000\036\000\036\000\000\000\037\000\
\000\000\000\000\037\000\036\000\036\000\037\000\037\000\000\000\
\000\000\037\000\000\000\000\000\000\000\037\000\037\000\037\000\
\000\000\038\000\000\000\000\000\038\000\037\000\037\000\038\000\
\038\000\000\000\000\000\038\000\000\000\000\000\000\000\038\000\
\038\000\038\000"

let yycheck = "\005\000\
\006\000\037\000\051\000\037\000\083\000\139\000\051\000\056\000\
\056\000\067\000\162\000\056\000\027\000\090\000\018\001\018\001\
\001\000\151\000\024\000\018\001\118\000\017\000\010\001\019\001\
\019\001\019\001\032\000\023\001\023\001\017\001\026\000\067\000\
\068\000\185\000\068\000\016\001\037\001\038\001\039\001\043\001\
\043\001\090\000\016\001\141\000\043\001\090\000\052\000\043\001\
\043\001\043\001\025\001\026\001\010\001\034\001\206\000\070\000\
\071\000\072\000\073\000\074\000\019\001\140\000\020\001\001\001\
\023\001\199\000\024\001\219\000\039\000\040\000\010\001\205\000\
\121\000\121\000\151\000\034\001\121\000\135\000\084\000\010\001\
\020\001\215\000\013\001\017\001\024\001\016\001\017\001\221\000\
\043\001\020\001\024\001\225\000\018\001\024\001\019\001\002\001\
\003\001\004\001\023\001\135\000\007\001\150\000\018\001\098\000\
\099\000\111\000\155\000\005\001\006\001\007\001\008\001\009\001\
\019\001\019\001\019\001\151\000\023\001\023\001\023\001\155\000\
\027\001\155\000\016\001\020\001\019\001\204\000\162\000\019\001\
\023\001\036\001\018\001\023\001\181\000\040\001\041\001\042\001\
\043\001\005\001\006\001\007\001\008\001\009\001\178\000\017\001\
\178\000\151\000\020\001\020\001\184\000\185\000\184\000\019\001\
\017\001\010\001\203\000\020\001\013\001\020\001\017\001\016\001\
\017\001\020\001\198\000\020\001\198\000\017\001\013\001\024\001\
\217\000\026\001\206\000\017\001\017\001\209\000\020\001\209\000\
\024\001\183\000\005\001\006\001\007\001\008\001\009\001\219\000\
\024\001\020\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\024\001\013\001\204\000\015\001\
\016\001\020\001\024\001\019\001\017\001\021\001\022\001\023\001\
\025\001\023\001\021\001\027\001\020\001\035\001\036\001\037\001\
\038\001\039\001\014\001\010\001\036\001\019\001\019\001\017\001\
\040\001\041\001\042\001\043\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\020\001\013\001\
\016\001\015\001\016\001\012\001\016\001\019\001\011\001\021\001\
\022\001\023\001\012\001\019\001\016\001\027\001\017\001\028\001\
\029\001\030\001\031\001\032\001\033\001\019\001\036\001\020\001\
\020\001\017\001\040\001\041\001\042\001\043\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\020\001\
\016\001\013\001\020\001\015\001\016\001\020\001\000\000\019\001\
\006\000\021\001\022\001\023\001\020\001\024\001\020\001\027\001\
\092\000\093\000\094\000\095\000\096\000\097\000\020\001\024\001\
\036\001\014\001\020\001\024\001\040\001\041\001\042\001\043\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\016\001\020\001\013\001\020\001\015\001\007\000\155\000\
\158\000\019\001\151\000\021\001\022\001\023\001\114\000\255\255\
\255\255\027\001\002\001\003\001\004\001\255\255\255\255\007\001\
\255\255\255\255\036\001\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\255\255\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\027\001\002\001\003\001\004\001\035\001\
\036\001\037\001\038\001\039\001\036\001\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\255\255\019\001\028\001\029\001\
\030\001\031\001\024\001\255\255\255\255\027\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\036\001\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\255\255\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\027\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\255\255\019\001\002\001\003\001\004\001\023\001\255\255\255\255\
\255\255\027\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\036\001\019\001\255\255\255\255\040\001\041\001\
\042\001\043\001\255\255\027\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\036\001\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\010\001\255\255\255\255\013\001\
\255\255\255\255\016\001\017\001\255\255\255\255\020\001\255\255\
\255\255\255\255\024\001\025\001\026\001\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\010\001\255\255\255\255\013\001\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\010\001\035\001\036\001\013\001\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\016\001\017\001\255\255\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\026\001\255\255\010\001\
\255\255\255\255\013\001\032\001\033\001\016\001\017\001\255\255\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\026\001\
\255\255\010\001\255\255\255\255\013\001\032\001\033\001\016\001\
\017\001\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\026\001"

let yynames_const = "\
  IMPORT\000\
  TRUE\000\
  FALSE\000\
  NIL\000\
  BOOLEAN\000\
  CHAR\000\
  FUNC\000\
  NUMBER\000\
  VOID\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  IN\000\
  RETURN\000\
  SEMI\000\
  COMMA\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  AND\000\
  OR\000\
  NOT\000\
  GT\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  ASSIGN\000\
  ADD\000\
  SUB\000\
  MULT\000\
  DIV\000\
  REM\000\
  STRING_LITERAL\000\
  NUM_LITERAL\000\
  CHAR_LITERAL\000\
  IDENTIFIER\000\
  "

let yynames_block = "\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lines) in
    Obj.repr(
# 35 "parser.mly"
          ( 5 )
# 471 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'imports_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'external_declaration) in
    Obj.repr(
# 38 "parser.mly"
                                     ( 5 )
# 479 "parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lines) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'external_declaration) in
    Obj.repr(
# 39 "parser.mly"
                               ( 5 )
# 487 "parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'imports) in
    Obj.repr(
# 42 "parser.mly"
            ( 5 )
# 494 "parser.ml"
               : 'imports_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                ( 5 )
# 500 "parser.ml"
               : 'imports_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'imports) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'import_declaration) in
    Obj.repr(
# 46 "parser.mly"
                               ( 5 )
# 508 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'import_declaration) in
    Obj.repr(
# 47 "parser.mly"
                       ( 5 )
# 515 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                           ( 5 )
# 521 "parser.ml"
               : 'import_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                 ( 5 )
# 527 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                ( 5 )
# 533 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                   ( 5 )
# 539 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
         ( 5 )
# 545 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( 5 )
# 551 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( 5 )
# 557 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_expression_list) in
    Obj.repr(
# 61 "parser.mly"
                             ( 5 )
# 564 "parser.ml"
               : 'argument_expression_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                 ( 5 )
# 570 "parser.ml"
               : 'argument_expression_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 65 "parser.mly"
                          ( 5 )
# 577 "parser.ml"
               : 'argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argument_expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 66 "parser.mly"
                                                         ( 5 )
# 585 "parser.ml"
               : 'argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 69 "parser.mly"
                       ( 5 )
# 592 "parser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 70 "parser.mly"
                                                ( 5 )
# 600 "parser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argument_expression_list_opt) in
    Obj.repr(
# 71 "parser.mly"
                                                                  ( 5 )
# 608 "parser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 74 "parser.mly"
                       ( 5 )
# 615 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 75 "parser.mly"
                         ( 5 )
# 622 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 76 "parser.mly"
                                      ( 5 )
# 629 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 79 "parser.mly"
                     ( 5 )
# 636 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 80 "parser.mly"
                                                    ( 5 )
# 644 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 81 "parser.mly"
                                                    ( 5 )
# 652 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 82 "parser.mly"
                                                     ( 5 )
# 660 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 83 "parser.mly"
                                                    ( 5 )
# 668 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 84 "parser.mly"
                                                    ( 5 )
# 676 "parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 87 "parser.mly"
                          ( 5 )
# 683 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 88 "parser.mly"
                                                    ( 5 )
# 691 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 89 "parser.mly"
                                                   ( 5 )
# 699 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 90 "parser.mly"
                                                   ( 5 )
# 707 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 91 "parser.mly"
                                                    ( 5 )
# 715 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 92 "parser.mly"
                                                   ( 5 )
# 723 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 93 "parser.mly"
                                                    ( 5 )
# 731 "parser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 96 "parser.mly"
                          ( 5 )
# 738 "parser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 97 "parser.mly"
                                                     ( 5 )
# 746 "parser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 98 "parser.mly"
                                                      ( 5 )
# 754 "parser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'multi_array_expression_list) in
    Obj.repr(
# 101 "parser.mly"
                                              ( 5 )
# 761 "parser.ml"
               : 'opt_paren_multi_array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multi_array_expression_list) in
    Obj.repr(
# 102 "parser.mly"
                                ( 5 )
# 768 "parser.ml"
               : 'opt_paren_multi_array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 106 "parser.mly"
                                            ( 5 )
# 776 "parser.ml"
               : 'multi_array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'array_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'array_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression_list) in
    Obj.repr(
# 107 "parser.mly"
                                                                        ( 5 )
# 785 "parser.ml"
               : 'multi_array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 110 "parser.mly"
                     ( 5 )
# 792 "parser.ml"
               : 'array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array_expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 111 "parser.mly"
                                                 ( 5 )
# 800 "parser.ml"
               : 'array_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 113 "parser.mly"
                           ( 5 )
# 807 "parser.ml"
               : 'array_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_comprehension) in
    Obj.repr(
# 114 "parser.mly"
                                     ( 5 )
# 814 "parser.ml"
               : 'array_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initer_list_opt) in
    Obj.repr(
# 115 "parser.mly"
                                  ( 5 )
# 821 "parser.ml"
               : 'array_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_comp) in
    Obj.repr(
# 118 "parser.mly"
            ( 5 )
# 828 "parser.ml"
               : 'if_comp_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                ( 5 )
# 834 "parser.ml"
               : 'if_comp_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 123 "parser.mly"
                  ( 5 )
# 841 "parser.ml"
               : 'if_comp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'array_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'paren_parameter_list_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'array_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'if_comp_opt) in
    Obj.repr(
# 127 "parser.mly"
              ( 5 )
# 851 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'array_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'paren_parameter_list_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_paren_multi_array_expression_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'if_comp_opt) in
    Obj.repr(
# 129 "parser.mly"
                                                    ( 5 )
# 861 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 133 "parser.mly"
                     ( 5 )
# 868 "parser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anonymous_function_definition) in
    Obj.repr(
# 134 "parser.mly"
                                  ( 5 )
# 875 "parser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 135 "parser.mly"
                                               ( 5 )
# 883 "parser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 136 "parser.mly"
                                                  ( 5 )
# 891 "parser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'anonymous_function_definition) in
    Obj.repr(
# 137 "parser.mly"
                                                            ( 5 )
# 899 "parser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 140 "parser.mly"
                          ( 5 )
# 906 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
               ( 5 )
# 912 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 144 "parser.mly"
             ( 5 )
# 919 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 145 "parser.mly"
                             ( 5 )
# 926 "parser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'type_specifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arithmetic_expression) in
    Obj.repr(
# 148 "parser.mly"
                                                       ( 5 )
# 934 "parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_specifier) in
    Obj.repr(
# 149 "parser.mly"
                                 ( 5 )
# 941 "parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_type) in
    Obj.repr(
# 150 "parser.mly"
               ( 5 )
# 948 "parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
         ( 5 )
# 954 "parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_specifier) in
    Obj.repr(
# 152 "parser.mly"
                   ( 5 )
# 961 "parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'type_specifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'type_list) in
    Obj.repr(
# 155 "parser.mly"
                                                      ( 5 )
# 969 "parser.ml"
               : 'func_specifier))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'type_specifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list_opt) in
    Obj.repr(
# 156 "parser.mly"
                                                               ( 5 )
# 977 "parser.ml"
               : 'func_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
           ( 5 )
# 983 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
         ( 5 )
# 989 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
            ( 5 )
# 995 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_specifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator) in
    Obj.repr(
# 164 "parser.mly"
                                   ( 5 )
# 1003 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_specifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'declarator) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'initer) in
    Obj.repr(
# 165 "parser.mly"
                                                 ( 5 )
# 1012 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "parser.mly"
               ( 5 )
# 1018 "parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator) in
    Obj.repr(
# 169 "parser.mly"
                             ( 5 )
# 1025 "parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_specifier) in
    Obj.repr(
# 172 "parser.mly"
                   ( 5 )
# 1032 "parser.ml"
               : 'type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_specifier) in
    Obj.repr(
# 173 "parser.mly"
                                   ( 5 )
# 1040 "parser.ml"
               : 'type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 176 "parser.mly"
                   ( 5 )
# 1047 "parser.ml"
               : 'parameter_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
               ( 5 )
# 1053 "parser.ml"
               : 'parameter_list_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list) in
    Obj.repr(
# 180 "parser.mly"
                                 ( 5 )
# 1060 "parser.ml"
               : 'paren_parameter_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 181 "parser.mly"
                   ( 5 )
# 1067 "parser.ml"
               : 'paren_parameter_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_declaration) in
    Obj.repr(
# 185 "parser.mly"
                          ( 5 )
# 1074 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_declaration) in
    Obj.repr(
# 186 "parser.mly"
                                               ( 5 )
# 1082 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_specifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 189 "parser.mly"
                              ( 5 )
# 1090 "parser.ml"
               : 'parameter_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_expression) in
    Obj.repr(
# 193 "parser.mly"
                     ( 5 )
# 1097 "parser.ml"
               : 'initer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anonymous_function_definition) in
    Obj.repr(
# 194 "parser.mly"
                                  ( 5 )
# 1104 "parser.ml"
               : 'initer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'initer_list) in
    Obj.repr(
# 197 "parser.mly"
                ( 5 )
# 1111 "parser.ml"
               : 'initer_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "parser.mly"
                ( 5 )
# 1117 "parser.ml"
               : 'initer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'initer) in
    Obj.repr(
# 201 "parser.mly"
           ( 5 )
# 1124 "parser.ml"
               : 'initer_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'initer_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initer) in
    Obj.repr(
# 202 "parser.mly"
                             ( 5 )
# 1132 "parser.ml"
               : 'initer_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression_opt) in
    Obj.repr(
# 205 "parser.mly"
                        ( 5 )
# 1139 "parser.ml"
               : 'expression_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 208 "parser.mly"
               ( 5 )
# 1146 "parser.ml"
               : 'expression_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
                          ( 5 )
# 1152 "parser.ml"
               : 'expression_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list_opt) in
    Obj.repr(
# 212 "parser.mly"
                                     ( 5 )
# 1159 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 215 "parser.mly"
                   ( 5 )
# 1166 "parser.ml"
               : 'statement_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
                ( 5 )
# 1172 "parser.ml"
               : 'statement_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 220 "parser.mly"
                                 ( 5 )
# 1180 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 221 "parser.mly"
                                   ( 5 )
# 1188 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 222 "parser.mly"
                                           ( 5 )
# 1196 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'if_statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elifs_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'else_opt) in
    Obj.repr(
# 225 "parser.mly"
                                    ( 5 )
# 1205 "parser.ml"
               : 'selection_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 228 "parser.mly"
                                                   ( 5 )
# 1213 "parser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'else_statement) in
    Obj.repr(
# 231 "parser.mly"
                   ( 5 )
# 1220 "parser.ml"
               : 'else_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
                ( 5 )
# 1226 "parser.ml"
               : 'else_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 235 "parser.mly"
                            ( 5 )
# 1233 "parser.ml"
               : 'else_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elifs) in
    Obj.repr(
# 238 "parser.mly"
          ( 5 )
# 1240 "parser.ml"
               : 'elifs_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
                ( 5 )
# 1246 "parser.ml"
               : 'elifs_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 242 "parser.mly"
                                                     ( 5 )
# 1254 "parser.ml"
               : 'elifs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'elifs) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 243 "parser.mly"
                                                           ( 5 )
# 1263 "parser.ml"
               : 'elifs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expression_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expression_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expression_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 247 "parser.mly"
                                                                                                ( 5 )
# 1273 "parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_opt) in
    Obj.repr(
# 250 "parser.mly"
                               ( 5 )
# 1280 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_statement) in
    Obj.repr(
# 253 "parser.mly"
                         ( 5 )
# 1287 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 254 "parser.mly"
                       ( 5 )
# 1294 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'selection_statement) in
    Obj.repr(
# 255 "parser.mly"
                        ( 5 )
# 1301 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_statement) in
    Obj.repr(
# 256 "parser.mly"
                        ( 5 )
# 1308 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'jump_statement) in
    Obj.repr(
# 257 "parser.mly"
                   ( 5 )
# 1315 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'type_specifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 260 "parser.mly"
                                                                                  ( 5 )
# 1324 "parser.ml"
               : 'anonymous_function_definition))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'type_specifier) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 263 "parser.mly"
                                                                                             ( 5 )
# 1333 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 267 "parser.mly"
                        ( 5 )
# 1340 "parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 268 "parser.mly"
                ( 5 )
# 1347 "parser.ml"
               : 'external_declaration))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int)
